set nocompatible
syntax enable

" Smashing escape mapping
inoremap jk <Esc>
inoremap kj <Esc>
let mapleader = ","
let g:mapleader = ","
nmap <leader>v :split ~/.vimrc<CR>
" Fast save
nmap <leader>w :w!<cr>

call plug#begin('~/.config/vim/plugged')

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-test/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'morhetz/gruvbox'
Plug 'github/copilot.vim'
Plug 'tpope/vim-fugitive' " Git commands
Plug 'tpope/vim-rhubarb' " Allows visiting Github URLs
Plug 'neovim/nvim-lspconfig'
Plug 'airblade/vim-gitgutter' " Shows git diff in the gutter
Plug 'ojroques/nvim-lspfuzzy'
Plug 'hrsh7th/nvim-compe'
Plug 'rmagatti/auto-session'

call plug#end()

colorscheme gruvbox
set background=dark  " For the dark theme

" Navigation
set backspace=eol,start,indent " Let backspace wrap
set whichwrap+=<,>,h,l         " Let movement wrap
set expandtab                  " Use spaces instead of tabs
set smarttab                   " Be smart when using tabs ;)
set shiftwidth=2               " Tab width
set tabstop=2                  " "
set ai                         " Auto indent
set si                         " Smart indent
set wrap                       " Wrap lines
set tw=80 		       " Limit line length
set lbr 	               " Soft wrap at word boundaries

" Cosmetics
set nu           " Show line number
set rnu          " Use relative line numbers
set so=7         " Pad the edge of the screen
set cmdheight=2  " Height of the command bar
set hid          " A buffer becomes hidden when it is abandoned
set showmatch    " Show matching brackets when text indicator is over them
set mat=2        " How many tenths of a second to blink when matching brackets
set laststatus=2 " Always show statusline
set cc=121       " Show where 120 chars is
set list         " Show the below hidden characters
set listchars=tab:>-,trail:Â·


command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

command! -bang -nargs=* GGrepNoTests
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Shortcuts for FZF commands
nnoremap <C-p> :GFiles<CR>
nnoremap <C-t> :Buffers<CR>
nnoremap <C-f> :GGrep<CR>

" Vim Test
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "dispatch"
let g:dispatch_tmux_pipe_pane = 1  " needed so $stdout.tty? is true and reline works when debugging
set cc=121

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"Remember info about open buffers on close
set viminfo^=%

" Fzf
    " Customize fzf colors to match your color scheme
    " - fzf#wrap translates this to a set of `--color` options
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }
